name: test

inputs:
  application:
    required: true
  repository:
    required: true
  branch:
     required: true
 


runs:
  using: "composite"
  steps:
    - name: Install postgres server
      if: ${{matrix.database == 'pgsql'}}
      run: |
        sudo apt install postgresql-14 postgresql-contrib
        sudo dpkg-reconfigure locales
        sudo sed -i -E 's\peer|scram-sha-256\trust\g' /etc/postgresql/14/main/pg_hba.conf
      shell: bash

    - name: Install mysql server
      if: ${{matrix.database == 'mysql'}}
      run: |
        sudo apt install -q -y mysql-server mysql-client
        sudo service mysql start
        sudo mysqladmin -u root -p'root' password ''
      shell: bash

    - name: Install mariadb server
      if: ${{matrix.database == 'mariadb'}}
      uses: ankane/setup-mariadb@v1
      with:
        mariadb-version: "10.11"

    - name: Install php environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{matrix.php-version}}
        extensions: bcmath, bz2, curl, gd, intl, mbstring, mysql,mysqlnd, mysqli, opcache, pdo_mysql, pgsql, json,soap, xml, zip
        coverage: xdebug
      env:
        update: true

    - name: Install PKP ${{inputs.application}}
      run: |
        git clone -b ${{inputs.branch}} https://github.com/${{inputs.repository}}/${{inputs.application}} ~/${{inputs.application}}
        cd ~/${{inputs.application}}
        git submodule update --init --recursive
      shell: bash

  
    - name: Install composer dependencies
      run: |
        cd ~/${{inputs.application}}
        lib/pkp/tools/travis/install-composer-dependencies.sh
      shell: bash

    
    - name: Install node dependencies
      run: |
        cd ~/${{inputs.application}}
        npm i g -npm && npm i @vue/cli-service && npm i cypress && npm install && npm run build
      shell: bash


    - name: Create necessary directories
      run: |
        mkdir -p $HOME/bin
      shell: bash


    - name: Run web  server
      run: |
        cd ~/${{inputs.application}}
        sudo apt-get install socat
        sudo socat TCP-LISTEN:80,fork,reuseaddr TCP:localhost:8080 &
        # Run the PHP internal server on port 8080.
        php -S 127.0.0.1:8080 -t . >& access.log &
      shell: bash
    
    - name: Prepare test environment
      run: |
        cd ~/${{inputs.application}}
        ./lib/pkp/tools/travis/prepare-tests.sh
      shell: bash
      env:
        TEST: ${{matrix.database}}
        DBTYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        APPLICATION: '${{inputs.application}}'
    
    
    - name: Run PHP web server
      run: |
        php -S 127.0.0.1:8000 -t . >& access.log &
      shell: bash
       
    - name: Run  integration tests
      run: |
        cd ~/${{inputs.application}}
        npx cypress run --headless --browser chrome --config '{"specPattern":["cypress/tests/data/**/*.cy.js"]}'
        npx cypress run --headless --browser chrome --config '{"specPattern":["lib/pkp/cypress/tests/integration/**/*.cy.js"]}'
        if [ -d "cypress/tests/integration" ]; then
          npx cypress run --headless --browser chrome --config '{"specPattern":["cypress/tests/integration/**/*.cy.js"]}'
        fi
      shell: bash
      env:
        
        BASEURL: http://localhost
        CYPRESS_BASE_URL: http://127.0.0.1:8000
        CYPRESS_DBTYPE: ${{matrix.database=='pgsql' && 'PostgreSQL' || 'MySQLi'}}
        CYPRESS_DBNAME: ${{inputs.application}}-ci
        CYPRESS_DBUSERNAME: ${{inputs.application}}-ci
        CYPRESS_DBPASSWORD: ${{inputs.application}}-ci
        CYPRESS_DBHOST: 127.0.0.1
        CYPRESS_FILESDIR: files

                  
      
    - name: Run unit tests
      run: |
        cd ~/${{inputs.application}}
        ./lib/pkp/tools/travis/dump-database.sh
        ./lib/pkp/tools/runAllTests.sh -CcPpdR
      shell: bash
      env:
        TEST: ${{matrix.database}}
        DBTYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        DATABASEDUMP: database.sql.gz
        FILESDUMP: files.tar.gz
        DBHOST: 127.0.0.1
        DBNAME: ${{inputs.application}}-ci
        DBUSERNAME: ${{inputs.application}}-ci
        DBPASSWORD: ${{inputs.application}}-ci

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: Create Cypess screenshots as artifacts
        path: ~/${{ inputs.application}}/cypress/screenshots
        if-no-files-found: ignore
